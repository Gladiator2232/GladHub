local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local webhookURL = "https://discord.com/api/webhooks/1343129552666497024/XX-fZzmosDyk7Wl3eUrmcN-8y0vtEzhklBCZ1PpxBxn6DqVQzz67HUGS1cmRklnZTl4N"  -- Replace with your actual webhook

-- Function to format large numbers into readable strings (1K, 1M, 1B, 1T)
local function formatNumber(number)
    if number >= 1e12 then
        return string.format("%.1fT", number / 1e12)  -- Trillion
    elseif number >= 1e9 then
        return string.format("%.1fB", number / 1e9)  -- Billion
    elseif number >= 1e6 then
        return string.format("%.1fM", number / 1e6)  -- Million
    elseif number >= 1e3 then
        return string.format("%.1fK", number / 1e3)  -- Thousand
    else
        return tostring(number)  -- Return the number as is if it's below 1000
    end
end

-- Function to send player stats
local function sendPlayerStats(player)
    if player and player:FindFirstChild("_stats") then
        local stats = player._stats
        local statsTable = {}

        -- Get the "damage_dealt" stat from _stats
        local damageDealt = stats:FindFirstChild("damage_dealt")
        if damageDealt then
            -- Format the damage_dealt value
            statsTable["damage_dealt"] = formatNumber(damageDealt.Value)
        end

        -- Construct Discord embed
        local data = {
            ["username"] = "GladHub",
            ["avatar_url"] = "https://cdn.discordapp.com/attachments/1327946461551525899/1333096060821966878/Logo.png",
            ["embeds"] = {{
                ["title"] = "**:crossed_swords:Damage Dealt:crossed_swords:**",
                ["description"] = "||" .. player.DisplayName .. "|| has sent their stats.",
                ["color"] = tonumber(0x00ff00),  -- Green color
                ["fields"] = {},
                ["image"] = {
                    ["url"] = "https://cdn.discordapp.com/attachments/1331144799675224074/1331144999059980359/1.0.0.832_2025.01.21_-_13.07.12.10.gif?ex=67c34ea3&is=67c1fd23&hm=443f7393b5dd3dbb63096f09a7a11fa4906e769e816e295343176ac829ef6dd6&"  -- GIF URL
                }
            }}
        }

        -- Add leaderstats fields (in this case, just damage_dealt)
        for statName, statValue in pairs(statsTable) do
            table.insert(data.embeds[1].fields, {
                ["name"] = statName,
                ["value"] = tostring(statValue),
                ["inline"] = true
            })
        end

        -- JSON encoding
        local requestData = {
            Url = webhookURL,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(data)
        }

        -- Send the webhook (Exploit-only method)
        if syn and syn.request then
            syn.request(requestData)  -- Synapse X
        elseif http and http.request then
            http.request(requestData)  -- ScriptWare
        elseif request then
            request(requestData)  -- Other executors (including potential custom ones)
        else
            warn(":x: Executor does not support HTTP requests!")
        end
    end
end

-- Listen for player leaving
Players.PlayerRemoving:Connect(function(player)
    sendPlayerStats(player)
end)
