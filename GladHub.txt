-- Define the player at the start of the script
local player = game.Players.LocalPlayer

-- MATCHMAKING BUTTON RESIZE LOGIC
local MMB = player.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
local PlaySolo = player.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons.PlaySolo
if MMB and PlaySolo then
    print("Found Matchmaking Buttons")
    print("Executing GladHub V.2")
    MMB.Size = UDim2.new(0, 5000, 0, 5000) -- Adjust size
    PlaySolo.Visible = false
else
    print("Matchmaking Buttons not found")
end

-- TELEPORTATION LOGIC (with continuous teleporting)
spawn(function()
    while true do
        -- Check if _CHRISTMAS folder exists in Workspace
        local christmasFolder = workspace:FindFirstChild("_CHRISTMAS")
        if christmasFolder then
            print("GladHub Executed - Christmas Event")
            wait(1.5)  -- Reduced wait time to make it faster (2x faster)
            print("Loaded Successful")
        
            local targetPart = workspace._EVENT_CHALLENGES.Lobbies._lobbytemplate_event3:FindFirstChild("Barrier")

            -- Ensure that the player and target part exist
            if player and player.Character and targetPart then
                local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
                -- Teleport the player by setting the HumanoidRootPart position
                humanoidRootPart.CFrame = targetPart.CFrame
                print("Player teleported to Barrier!")
            else
                print("Target part 'Barrier' not found or player character not found.")
            end
        else
            print("Christmas folder not found, checking for spawn logic")
            wait(2.5)  -- Reduced wait time to make it faster (2x faster)
            print("Loaded Successful")

            local lanesFolder = workspace._BASES:FindFirstChild("player"):FindFirstChild("LANES")
            if lanesFolder then
                local lane1 = lanesFolder:FindFirstChild("1")
                if lane1 then
                    local targetPart = lane1:FindFirstChild("spawn")

                    -- Ensure that the player and target part exist
                    if player and player.Character and targetPart then
                        local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")

                        -- Get the position of the target part
                        local targetPosition = targetPart.Position
                        
                        -- Create a new position 2 studs above the target spawn
                        local newPosition = targetPosition + Vector3.new(0, 0, 0)

                        -- Teleport the player by setting the HumanoidRootPart position 2 studs above the spawn
                        humanoidRootPart.CFrame = CFrame.new(newPosition)

                        -- Unanchor the player's humanoidRootPart to allow movement
                        humanoidRootPart.Anchored = false
                        print("Player teleported to spawn!")
                    else
                        print("Target part 'spawn' not found or player character not found.")
                    end
                else
                    print("Lane '1' not found in _BASES.player.LANES.")
                end
            else
                print("LANES folder not found in _BASES.player.")
            end
        end
        -- Reduce wait time between teleport attempts to speed up the process (2x faster)
        wait(1.5)  -- Reduced to make teleportation attempt faster
    end
end)

-- CAPTCHA BYPASS LOGIC (with continuous checking)
local function bypassCaptcha()
    print("Waiting for CAPTCHA window to appear...")

    -- Continuously check for the CAPTCHA window
    while true do
        local gui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local notificationWindows = gui and gui:FindFirstChild("NotificationWindows")
        local popups = notificationWindows and notificationWindows:FindFirstChild("Popups")
        local captchaWindow = popups and popups:FindFirstChild("CaptchaWindow")

        if captchaWindow then
            print("CAPTCHA detected!")

            -- Resize the "Yes" button inside ButtonHolder
            local buttonHolder = captchaWindow:FindFirstChild("ButtonHolder")
            if buttonHolder then
                local yesButton = buttonHolder:FindFirstChild("Yes")  -- Assuming the button is named "Yes"
                if yesButton then
                    yesButton.Size = UDim2.new(0, 5000, 0, 5000)  -- Resize the button
                    print("Resized 'Yes' button to size 0,5000,0,5000.")
                else
                    print("'Yes' button not found in ButtonHolder.")
                end
            else
                print("ButtonHolder not found in CAPTCHA window.")
            end

            -- Attempt to bypass the CAPTCHA
            local typeBox = captchaWindow:FindFirstChild("TypeBox")
            local captchaText = captchaWindow:FindFirstChild("Captcha")

            if typeBox and captchaText then
                print("Bypassing CAPTCHA...")
                typeBox.Text = captchaText.Text -- Copy the CAPTCHA text to the input
                print("CAPTCHA bypassed successfully!")
                return -- CAPTCHA bypass complete, exit function
            else
                print("ERROR: CAPTCHA elements not found! Retrying...")
            end
        end

        -- Wait briefly before checking again (2x faster)
        task.wait(0.5) -- Adjust the wait time to 0.5 for faster detection
    end
end

-- TELEPORT TO BARRIER AND START CAPTCHA CHECKING IN PARALLEL
spawn(function()
    while true do
        teleportPlayerToBarrier() -- Teleport to barrier every few seconds
        task.wait(0.5) -- Delay between teleport attempts, reduced to 2.5 seconds for faster teleports
    end
end)

-- CALL CAPTCHA AFTER WAITING FOR TELEPORTATION (with continuous captcha checking)
spawn(function()
    while true do
        bypassCaptcha() -- Continuously check for and bypass CAPTCHA
        task.wait(0.15)  -- Adjust wait time to 0.5 seconds to speed up CAPTCHA detection
    end
end)
