-- MATCHMAKING BUTTON RESIZE LOGIC
local MMB = game.Players.LocalPlayer.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
local PlaySolo = game.Players.LocalPlayer.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons.PlaySolo
if MMB and PlaySolo then
    print("Found Matchmaking Buttons")
    print("Executing GladHub V.2")
    MMB.Size = UDim2.new(0, 5000, 0, 5000) -- Adjust size
    PlaySolo.Visible = false
else
    print("Matchmaking Buttons not found")
end

-- HIDE ROBLOX INTERFACES (Optional)
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false) -- Hide leaderboard
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)       -- Hide chat

-- CONFIGURATION SECTION
local UIConfig = {
    MainFrameSize = UDim2.new(0, 300, 0, 100),
    MainFramePosition = UDim2.new(0.5, -150, 0.4, 0),
    FrameColor = Color3.fromRGB(50, 50, 50),
    GradientColors = {
        Color3.fromRGB(0, 255, 255),
        Color3.fromRGB(0, 100, 255)
    },
    LoadingText = {"Initializing...", "Loading Assets...", "Ready!"},
    AnimationDuration = 2,
    ExpandFrameDuration = 10,
    FadeDuration = 1.5,
    TweenStyles = {
        InStyle = Enum.EasingStyle.Back,
        InDirection = Enum.EasingDirection.Out,
        OutStyle = Enum.EasingStyle.Quad,
        OutDirection = Enum.EasingDirection.In,
    }
}

-- HELPER FUNCTIONS
local function createUICorner(parent, radius)
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = radius or UDim.new(0, 8)
    uiCorner.Parent = parent
    return uiCorner
end

local function createGradient(parent, colors)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colors[1]),
        ColorSequenceKeypoint.new(1, colors[2])
    })
    gradient.Parent = parent
    return gradient
end

local function tweenObject(object, properties, duration, easingStyle, easingDirection)
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tween = tweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function fadeOutFrame(frame, duration, easingStyle, easingDirection)
    tweenObject(frame, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
    for _, child in ipairs(frame:GetDescendants()) do
        if child:IsA("GuiObject") then
            tweenObject(child, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                tweenObject(child, {TextTransparency = 1}, duration, easingStyle, easingDirection)
            end
        end
    end
end

-- MAIN UI CREATION
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Parent = screenGui
mainFrame.Size = UIConfig.MainFrameSize
mainFrame.Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0) -- Start off-screen below
mainFrame.BackgroundColor3 = UIConfig.FrameColor
mainFrame.BackgroundTransparency = 1 -- Invisible initially
createUICorner(mainFrame)
createGradient(mainFrame, UIConfig.GradientColors)

local textLabel = Instance.new("TextLabel")
textLabel.Parent = mainFrame
textLabel.Size = UDim2.new(1, -20, 0.5, -10)
textLabel.Position = UDim2.new(0, 10, 0, 10)
textLabel.Text = "Loading..."
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextScaled = true
textLabel.Font = Enum.Font.GothamBold

local progressBar = Instance.new("Frame")
progressBar.Parent = mainFrame
progressBar.Size = UDim2.new(0, 0, 0.1, 0)
progressBar.Position = UDim2.new(0, 10, 0.8, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
progressBar.BackgroundTransparency = 0
createUICorner(progressBar)

-- IN ANIMATION: Slide and Fade In
tweenObject(mainFrame, 
    {Position = UIConfig.MainFramePosition, BackgroundTransparency = 0}, 
    UIConfig.AnimationDuration, 
    UIConfig.TweenStyles.InStyle, 
    UIConfig.TweenStyles.InDirection
)

-- LOADING TEXT ANIMATION
spawn(function()
    local index = 1
    while true do
        textLabel.Text = UIConfig.LoadingText[index]
        index = (index % #UIConfig.LoadingText) + 1
        task.wait(1)
    end
end)

-- PROGRESS BAR EXPANSION
spawn(function()
    local tween = tweenObject(progressBar, {Size = UDim2.new(1, -20, 0.1, 0)}, UIConfig.ExpandFrameDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    tween.Completed:Wait()
    textLabel.Text = "Complete!"
    wait(1)
    -- OUT ANIMATION: Fade and Slide Out
    fadeOutFrame(mainFrame, UIConfig.FadeDuration, UIConfig.TweenStyles.OutStyle, UIConfig.TweenStyles.OutDirection)
    tweenObject(mainFrame, 
        {Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0)}, 
        UIConfig.FadeDuration, 
        UIConfig.TweenStyles.OutStyle, 
        UIConfig.TweenStyles.OutDirection
    )
end)

-- TELEPORTATION LOGIC (with 1-second pause between teleport attempts)
spawn(function()
    while true do
        -- Check if _CHRISTMAS folder exists in Workspace
        local christmasFolder = workspace:FindFirstChild("_CHRISTMAS")
        if christmasFolder then
            print("GladHub Executed - Christmas Event")
            -- Immediately check and teleport without wait
            local targetPart = workspace._EVENT_CHALLENGES.Lobbies._lobbytemplate_event3:FindFirstChild("Barrier")

            -- Ensure that the player and target part exist
            if player and player.Character and targetPart then
                local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
                -- Teleport the player directly by setting the HumanoidRootPart position
                humanoidRootPart.CFrame = targetPart.CFrame
                print("Player teleported to Barrier!")
            else
                print("Target part 'Barrier' not found or player character not found.")
            end
        else
            print("Christmas folder not found, checking for spawn logic")
            -- Immediately check and teleport without wait
            local lanesFolder = workspace._BASES:FindFirstChild("player"):FindFirstChild("LANES")
            if lanesFolder then
                local lane1 = lanesFolder:FindFirstChild("1")
                if lane1 then
                    local targetPart = lane1:FindFirstChild("spawn")

                    -- Ensure that the player and target part exist
                    if player and player.Character and targetPart then
                        local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")

                        -- Get the position of the target part
                        local targetPosition = targetPart.Position
                        
                        -- Create a new position 2 studs above the target spawn
                        local newPosition = targetPosition + Vector3.new(0, 15, 0)

                        -- Teleport the player directly to the new position
                        humanoidRootPart.CFrame = CFrame.new(newPosition)

                        -- Unanchor the player's humanoidRootPart to allow movement
                        humanoidRootPart.Anchored = false
                        print("Player teleported to spawn!")
                    else
                        print("Target part 'spawn' not found or player character not found.")
                    end
                else
                    print("Lane '1' not found in _BASES.player.LANES.")
                end
            else
                print("LANES folder not found in _BASES.player.")
            end
        end

        -- Add a 1-second pause to avoid crashes
        wait(1)
    end
end)

-- CAPTCHA BYPASS LOGIC (with continuous checking and slight delay)
local function bypassCaptcha()
    print("Waiting for CAPTCHA window to appear...")

    -- Continuously check for the CAPTCHA window
    while true do
        local gui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local notificationWindows = gui and gui:FindFirstChild("NotificationWindows")
        local popups = notificationWindows and notificationWindows:FindFirstChild("Popups")
        local captchaWindow = popups and popups:FindFirstChild("CaptchaWindow")

        if captchaWindow then
            print("CAPTCHA detected!")

            -- Attempt to bypass the CAPTCHA
            local typeBox = captchaWindow:FindFirstChild("TypeBox")
            local captchaText = captchaWindow:FindFirstChild("Captcha")

            if typeBox and captchaText then
                print("Bypassing CAPTCHA...")
                typeBox.Text = captchaText.Text -- Copy the CAPTCHA text to the input
                print("CAPTCHA bypassed successfully!")
                return -- CAPTCHA bypass complete, exit function
            else
                print("ERROR: CAPTCHA elements not found! Retrying...")
            end

            -- Optionally hide "TypeFrame" button if present (if needed)
            local typeFrame = captchaWindow:FindFirstChild("TypeFrame")
            if typeFrame then
                print("Hiding CAPTCHA TypeFrame button...")
                typeFrame.TextButton.Visible = false
            end
        end

        -- Small delay to prevent crashing
        task.wait(0.05) -- Prevents the loop from running too fast, helps with performance
    end
end

-- START CAPTCHA BYPASS
spawn(function()
    bypassCaptcha() -- Start bypassCaptcha function in a separate thread to keep it running without blocking
end)
