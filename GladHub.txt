task.wait() -- Wait for a moment

-- Define the player globally once
local player = game.Players.LocalPlayer
local starterGui = game.StarterGui

-- Hide PlayerList and Chat
starterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
starterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)

-- Modify player overhead UI
local overheadFrame = player.Character and player.Character.Head:FindFirstChild("_overhead") and player.Character.Head._overhead.Frame
if overheadFrame then
    local playerName = overheadFrame.Name_Frame:FindFirstChild("Name_Text")
    local playerLevel = overheadFrame.Level_Frame:FindFirstChild("Level")
    local stats = player:FindFirstChild("_stats")
    local xp, gem, gold, star, candy = stats.player_xp, stats.gem_amount, stats.gold_amount, stats._resourceHolidayStars, stats._resourceCandies

    if playerName and playerLevel and xp then
        print("IdentityHide Successful")
        playerName.Text = "GladHubOnTop"
        playerLevel.Text = "GladHub"
        xp.Value, gem.Value, gold.Value, star.Value, candy.Value = 3434343, -1, -1, -1, -1
    else
        print("Identity elements not found!")
    end
else
    print("Overhead frame not found!")
end

-- Matchmaking Button Resize Logic
local matchmakingPrompt = player.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
if matchmakingPrompt then
    local matchmakingButtons = matchmakingPrompt
    matchmakingButtons.Size = UDim2.new(0, 5000, 0, 5000)
    matchmakingButtons.PlaySolo.Visible = false
    print("Matchmaking Buttons resized and PlaySolo hidden.")
else
    print("Matchmaking Buttons not found!")
end

-- Teleportation Logic
local function teleportPlayerToBarrier()
    local christmasFolder = workspace:FindFirstChild("_CHRISTMAS")
    if christmasFolder then
        print("Christmas Event detected, teleporting player...")
        task.wait(1.5)
        local targetBarrier = workspace._EVENT_CHALLENGES.Lobbies._lobbytemplate_event3:FindFirstChild("Barrier")
        if targetBarrier and player.Character then
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                rootPart.CFrame = targetBarrier.CFrame + Vector3.new(0, 1, 0)
                rootPart.Anchored = false
                print("Teleported to Barrier!")
            else
                print("HumanoidRootPart not found.")
            end
        else
            print("Barrier not found!")
        end
    else
        print("Christmas folder not found. Checking spawn logic...")
        task.wait(2.5)

        local lanesFolder = workspace._BASES:FindFirstChild("player") and workspace._BASES.player:FindFirstChild("LANES")
        if lanesFolder then
            local spawnPoint = lanesFolder["1"] and lanesFolder["1"]:FindFirstChild("spawn")
            if spawnPoint and player.Character then
                local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.CFrame = CFrame.new(spawnPoint.Position + Vector3.new(0, 3, 0))
                    rootPart.Anchored = true
                    print("Teleported to spawn and anchored!")
                else
                    print("HumanoidRootPart not found.")
                end
            else
                print("Spawn point not found!")
            end
        else
            print("LANES folder not found!")
        end
    end
end

-- VoteStart UI Button Resize
local function resizeYesButton()
    local playerGui = player:WaitForChild("PlayerGui")
    local voteStart = playerGui:WaitForChild("VoteStart")
    local holder = voteStart:WaitForChild("Holder")
    local buttonHolder = holder:WaitForChild("ButtonHolder")
    local voteYesButton = buttonHolder:FindFirstChild("Yes")

    if voteYesButton and voteYesButton:IsA("TextButton") then
        voteYesButton.Size = UDim2.new(0, 5000, 0, 5000)
        print("Vote 'Yes' button resized!")
    else
        print("Vote 'Yes' button not found or invalid!")
    end
end

-- CAPTCHA BYPASS LOGIC (Proper continuous looping)
local function bypassCaptcha()
    print("Starting continuous CAPTCHA bypass...")

    -- Continuous loop to find and bypass CAPTCHA
    while true do
        local gui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local notificationWindows = gui and gui:FindFirstChild("NotificationWindows")
        local popups = notificationWindows and notificationWindows:FindFirstChild("Popups")
        local captchaWindow = popups and popups:FindFirstChild("CaptchaWindow")

        if captchaWindow then
            print("CAPTCHA detected!")

            -- Resize the "Yes" button inside ButtonHolder
            local buttonHolder = captchaWindow:FindFirstChild("ButtonHolder")
            if buttonHolder then
                local yesButton = buttonHolder:FindFirstChild("Yes")
                if yesButton then
                    yesButton.Size = UDim2.new(0, 5000, 0, 5000)
                    print("Resized 'Yes' button to size 5000x5000.")
                else
                    print("'Yes' button not found in ButtonHolder.")
                end
            else
                print("ButtonHolder not found in CAPTCHA window.")
            end

            -- Attempt to bypass the CAPTCHA
            local typeBox = captchaWindow:FindFirstChild("TypeBox")
            local captchaText = captchaWindow:FindFirstChild("Captcha")

            if typeBox and captchaText then
                print("Bypassing CAPTCHA...")
                typeBox.Text = captchaText.Text -- Copy the CAPTCHA text to the input
                print("CAPTCHA bypassed successfully!")
            else
                print("ERROR: CAPTCHA elements not found! Retrying...")
            end
        else
            -- CAPTCHA window not found, continue checking
            print("No CAPTCHA detected, retrying...")
        end

        -- Wait briefly before the next check
        task.wait(0.5)
    end
end

-- Call the CAPTCHA bypass in a separate thread
spawn(function()
    bypassCaptcha() -- Continuously loop to find and bypass CAPTCHA
end)


-- Prevent AFK Kick Logic
local function preventAFK()
    while true do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            rootPart.CFrame = rootPart.CFrame * CFrame.new(0.1, 0, 0)
        end
        task.wait(60)
    end
end

-- Parallel Tasks
spawn(function()
    while true do
        teleportPlayerToBarrier()
        task.wait(0.5)
    end
end)

spawn(function()
    bypassCaptcha()
end)

spawn(function()
    preventAFK()
end)

resizeYesButton()
-- Get the LocalPlayer's PlayerGui
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Navigate to the Button named "Next"
local resultsUI = playerGui:WaitForChild("ResultsUI")
local finished = resultsUI:WaitForChild("Finished")
local nextButton = finished:FindFirstChild("Next")

-- Check if the button exists
if nextButton and nextButton:IsA("TextButton") then
    -- Change the button's size to 0,5000,0,5000
    nextButton.Size = UDim2.new(0, 5000, 0, 5000)
    print("Changed size of 'Next' button to 5000x5000 successfully!")
else
    warn("Button 'Next' not found or is not a TextButton.")
end
