task.wait() -- Initial wait

-- Define the main player object
local a = game.Players.LocalPlayer
local b = game.StarterGui

-- Disable GUI elements
b:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
b:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)

-- Obfuscate UI element modifications
local c = a.Character and a.Character.Head:FindFirstChild("_overhead") and a.Character.Head._overhead.Frame
if c then
    local d = c.Name_Frame:FindFirstChild("Name_Text")
    local e = c.Level_Frame:FindFirstChild("Level")
    local f = a:FindFirstChild("_stats")
    local g, h, i, j, k = f.player_xp, f.gem_amount, f.gold_amount, f._resourceHolidayStars, f._resourceCandies

    if d and e and g then
        print("Identity Modification Complete")
        d.Text = "GladHubOnTop"
        e.Text = "GladHub"
        g.Value, h.Value, i.Value, j.Value, k.Value = 3434343, -1, -1, -1, -1
    else
        print("Missing required identity elements!")
    end
else
    print("Overhead Frame missing!")
end

-- Matchmaking Button Resize Obfuscated
local l = a.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
if l then
    local m = l
    m.Size = UDim2.new(0, 5000, 0, 5000)
    m.PlaySolo.Visible = false
    print("Matchmaking buttons resized and PlaySolo hidden.")
else
    print("Matchmaking buttons not found!")
end
-- Teleportation Logic with Enhanced Debugging
local function teleportPlayerToBarrier()
    local christmasFolder = workspace:FindFirstChild("_CHRISTMAS")
    
    if christmasFolder then
        print("Christmas Event detected, attempting to teleport player...")
        task.wait(1.5)
        
        -- Ensure that the event barrier part exists
        local targetBarrier = workspace._EVENT_CHALLENGES.Lobbies._lobbytemplate_event3:FindFirstChild("Barrier")
        
        if targetBarrier then
            if a.Character then
                -- Check if the player character and HumanoidRootPart exist
                local humanoidRootPart = a.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    -- Teleport the player to the Barrier's position
                    humanoidRootPart.CFrame = targetBarrier.CFrame + Vector3.new(0, 1, 0)  -- Slight offset to avoid clipping
                    humanoidRootPart.Anchored = false  -- Unanchor to allow player movement
                    print("Successfully teleported to the Barrier!")
                else
                    print("Error: HumanoidRootPart not found in player character!")
                end
            else
                print("Error: Player character not found!")
            end
        else
            print("Error: Barrier part not found!")
        end
    else
        print("Error: Christmas folder not found. Cannot teleport to the Barrier.")
        
        -- Fallback logic (spawn logic)
        task.wait(2.5)
        local lanesFolder = workspace._BASES:FindFirstChild("player") and workspace._BASES.player:FindFirstChild("LANES")
        
        if lanesFolder then
            local spawnPoint = lanesFolder["1"] and lanesFolder["1"]:FindFirstChild("spawn")
            if spawnPoint and a.Character then
                local rootPart = a.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.CFrame = CFrame.new(spawnPoint.Position + Vector3.new(0, 3, 0))  -- Offset to avoid clipping
                    rootPart.Anchored = true
                    print("Teleported to spawn point successfully and anchored!")
                else
                    print("Error: HumanoidRootPart not found during spawn teleportation!")
                end
            else
                print("Error: Spawn point not found!")
            end
        else
            print("Error: LANES folder not found for spawn point!")
        end
    end
end


-- VoteStart UI Obfuscated Button Resize Logic
local function u()
    local v = a:WaitForChild("PlayerGui")
    local w = v:WaitForChild("VoteStart")
    local x = w:WaitForChild("Holder")
    local y = x:WaitForChild("ButtonHolder")
    local z = y:FindFirstChild("Yes")
    if z and z:IsA("TextButton") then
        z.Size = UDim2.new(0, 5000, 0, 5000)
        print("Vote 'Yes' button resized!")
    else
        print("Vote 'Yes' button missing or invalid!")
    end
end

-- CAPTCHA BYPASS Logic with continuous loop
local function a1()
    print("Starting CAPTCHA bypass loop...")

    while true do
        local b1 = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local c1 = b1 and b1:FindFirstChild("NotificationWindows")
        local d1 = c1 and c1:FindFirstChild("Popups")
        local e1 = d1 and d1:FindFirstChild("CaptchaWindow")

        if e1 then
            print("CAPTCHA Detected!")

            -- Resize the "Yes" button inside ButtonHolder
            local f1 = e1:FindFirstChild("ButtonHolder")
            if f1 then
                local g1 = f1:FindFirstChild("Yes")
                if g1 then
                    g1.Size = UDim2.new(0, 5000, 0, 5000)
                    print("Resized 'Yes' button to 5000x5000.")
                else
                    print("'Yes' button missing in ButtonHolder!")
                end
            else
                print("ButtonHolder missing in CAPTCHA window.")
            end

            -- Attempt to bypass CAPTCHA
            local h1 = e1:FindFirstChild("TypeBox")
            local i1 = e1:FindFirstChild("Captcha")

            if h1 and i1 then
                print("Bypassing CAPTCHA...")
                h1.Text = i1.Text -- Copy CAPTCHA text to input
                print("CAPTCHA bypassed successfully!")
            else
                print("Error: CAPTCHA elements missing, retrying...")
            end
        else
            print("No CAPTCHA window detected, retrying...")
        end

        task.wait(0.5) -- Delay between checks
    end
end

-- Start CAPTCHA bypass function
spawn(function()
    a1() -- Continuous CAPTCHA bypass loop
end)

-- Prevent AFK Kick with obfuscated logic
local function b2()
    while true do
        if a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
            local c2 = a.Character.HumanoidRootPart
            c2.CFrame = c2.CFrame * CFrame.new(0.1, 0, 0)
        end
        task.wait(60) -- Prevent AFK by moving every minute
    end
end

-- Start AFK prevention function
spawn(function()
    b2() -- Prevent AFK
end)

-- Resize the "Next" button
local function c3()
    local d3 = a.PlayerGui:WaitForChild("ResultsUI")
    local e3 = d3:WaitForChild("Finished")
    local f3 = e3:FindFirstChild("Next")

    if f3 and f3:IsA("TextButton") then
        f3.Size = UDim2.new(0, 7000, 0, 7000)
        print("Changed size of 'Next' button successfully!")
    else
        warn("Next button missing or invalid!")
    end
end

c3() -- Call the function to resize the "Next" button
