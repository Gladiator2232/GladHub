-- CAPTCHA BYPASS LOGIC
local function bypassCaptcha()
    print("Waiting for CAPTCHA window to appear...")

    -- Wait until the CAPTCHA window exists
    while true do
        local gui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local notificationWindows = gui and gui:FindFirstChild("NotificationWindows")
        local popups = notificationWindows and notificationWindows:FindFirstChild("Popups")
        local captchaWindow = popups and popups:FindFirstChild("CaptchaWindow")

        if captchaWindow then
            print("CAPTCHA detected!")
            
            -- Attempt to bypass the CAPTCHA
            local typeBox = captchaWindow:FindFirstChild("TypeBox")
            local captchaText = captchaWindow:FindFirstChild("Captcha")

            if typeBox and captchaText then
                print("Bypassing CAPTCHA...")
                typeBox.Text = captchaText.Text -- Copy the CAPTCHA text to the input
                print("CAPTCHA bypassed successfully!")
                break -- Exit the loop once the CAPTCHA is bypassed
            else
                print("ERROR: CAPTCHA elements not found! Retrying...")
            end
        end

        -- Wait briefly before retrying
        task.wait(0.5)
    end
end

-- Call the Captcha bypass logic at the start
bypassCaptcha()

-- HIDE ROBLOX INTERFACES
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false) -- Hide leaderboard
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)       -- Hide chat

-- MATCHMAKING BUTTON RESIZE LOGIC
local MMB = game.Players.LocalPlayer.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
local PlaySolo = game.Players.LocalPlayer.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons.PlaySolo
if MMB and PlaySolo then
    print("Found Matchmaking Buttons")
    print("Executing GladHub V.2")
    MMB.Size = UDim2.new(0, 5000, 0, 5000) -- Adjust size
	PlaySolo.Visible = false

else
    print("Matchmaking Buttons not found")
end

-- CONFIGURATION SECTION
local UIConfig = {
    MainFrameSize = UDim2.new(0, 300, 0, 100),
    MainFramePosition = UDim2.new(0.5, -150, 0.4, 0),
    FrameColor = Color3.fromRGB(50, 50, 50),
    GradientColors = {
        Color3.fromRGB(0, 255, 255),
        Color3.fromRGB(0, 100, 255)
    },
    LoadingText = {"Initializing...", "Loading Assets...", "Ready!"},
    AnimationDuration = 2,
    ExpandFrameDuration = 10,
    FadeDuration = 1.5,
    TweenStyles = {
        InStyle = Enum.EasingStyle.Back,
        InDirection = Enum.EasingDirection.Out,
        OutStyle = Enum.EasingStyle.Quad,
        OutDirection = Enum.EasingDirection.In,
    }
}

-- HELPER FUNCTIONS
local function createUICorner(parent, radius)
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = radius or UDim.new(0, 8)
    uiCorner.Parent = parent
    return uiCorner
end

local function createGradient(parent, colors)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colors[1]),
        ColorSequenceKeypoint.new(1, colors[2])
    })
    gradient.Parent = parent
    return gradient
end

local function tweenObject(object, properties, duration, easingStyle, easingDirection)
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tween = tweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function fadeOutFrame(frame, duration, easingStyle, easingDirection)
    tweenObject(frame, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
    for _, child in ipairs(frame:GetDescendants()) do
        if child:IsA("GuiObject") then
            tweenObject(child, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                tweenObject(child, {TextTransparency = 1}, duration, easingStyle, easingDirection)
            end
        end
    end
end

-- MAIN UI CREATION
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Parent = screenGui
mainFrame.Size = UIConfig.MainFrameSize
mainFrame.Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0)
mainFrame.BackgroundColor3 = UIConfig.FrameColor
mainFrame.BackgroundTransparency = 1
createUICorner(mainFrame)
createGradient(mainFrame, UIConfig.GradientColors)

local textLabel = Instance.new("TextLabel")
textLabel.Parent = mainFrame
textLabel.Size = UDim2.new(1, -20, 0.5, -10)
textLabel.Position = UDim2.new(0, 10, 0, 10)
textLabel.Text = "Loading..."
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextScaled = true
textLabel.Font = Enum.Font.GothamBold

local progressBar = Instance.new("Frame")
progressBar.Parent = mainFrame
progressBar.Size = UDim2.new(0, 0, 0.1, 0)
progressBar.Position = UDim2.new(0, 10, 0.8, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
progressBar.BackgroundTransparency = 0
createUICorner(progressBar)

-- IN ANIMATION
tweenObject(mainFrame, {Position = UIConfig.MainFramePosition, BackgroundTransparency = 0}, UIConfig.AnimationDuration, UIConfig.TweenStyles.InStyle, UIConfig.TweenStyles.InDirection)

-- LOADING TEXT ANIMATION
spawn(function()
    local index = 1
    while true do
        textLabel.Text = UIConfig.LoadingText[index]
        index = (index % #UIConfig.LoadingText) + 1
        task.wait(1)
    end
end)

-- PROGRESS BAR EXPANSION
spawn(function()
    local tween = tweenObject(progressBar, {Size = UDim2.new(1, -20, 0.1, 0)}, UIConfig.ExpandFrameDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    tween.Completed:Wait()
    textLabel.Text = "Complete!"
    wait(1)
    fadeOutFrame(mainFrame, UIConfig.FadeDuration, UIConfig.TweenStyles.OutStyle, UIConfig.TweenStyles.OutDirection)
    tweenObject(mainFrame, {Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0)}, UIConfig.FadeDuration, UIConfig.TweenStyles.OutStyle, UIConfig.TweenStyles.OutDirection)
end)

-- TELEPORTATION LOGIC
local function teleportPlayer()
    task.wait(5)
    local eventChallenges = workspace:FindFirstChild("_EVENT_CHALLENGES")
    if eventChallenges then
        local lobbyTemplate = eventChallenges.Lobbies:FindFirstChild("_lobbytemplate_event3")
        if lobbyTemplate and lobbyTemplate:FindFirstChild("Barrier") then
            player.Character.HumanoidRootPart.CFrame = lobbyTemplate.Barrier.CFrame
            return
        end
    end
    local spawnPoint = workspace._BASES and workspace._BASES.player.LANES["1"]:FindFirstChild("spawn")
    if spawnPoint then
        player.Character.HumanoidRootPart.CFrame = spawnPoint.CFrame + Vector3.new(0, 5, 0)
    end
end

spawn(function()
    while true do
        teleportPlayer()
        wait(7)
    end
end)
