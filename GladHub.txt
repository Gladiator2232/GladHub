local MMB = game.Players.LocalPlayer.PlayerGui.NotificationWindows.Popups.PopupTemplate.MatchmakingPrompt.Main.Buttons
if MMB then
    print("Found")
    print("Executing GladHub V.2")
    -- Set the size using UDim2.new
    MMB.Size = UDim2.new(0, 5000, 0, 5000)
else
    print("Not Found")
end

-- Hide the leaderboard
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)

-- Hide the chat
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)

-- CONFIGURATION SECTION
local UIConfig = {
    MainFrameSize = UDim2.new(0, 300, 0, 100),
    MainFramePosition = UDim2.new(0.5, -150, 0.4, 0),
    FrameColor = Color3.fromRGB(50, 50, 50),
    GradientColors = {
        Color3.fromRGB(0, 255, 255),
        Color3.fromRGB(0, 100, 255)
    },
    LoadingText = {"Initializing...", "Loading Assets...", "Ready!"},
    AnimationDuration = 2, -- General duration for animations
    ExpandFrameDuration = 10,
    FadeDuration = 1.5,
    TweenStyles = {
        InStyle = Enum.EasingStyle.Back,
        InDirection = Enum.EasingDirection.Out,
        OutStyle = Enum.EasingStyle.Quad,
        OutDirection = Enum.EasingDirection.In,
    }
}

-- HELPER FUNCTIONS
local function createUICorner(parent, radius)
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = radius or UDim.new(0, 8)
    uiCorner.Parent = parent
    return uiCorner
end

local function createGradient(parent, colors)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colors[1]),
        ColorSequenceKeypoint.new(1, colors[2])
    })
    gradient.Parent = parent
    return gradient
end

local function tweenObject(object, properties, duration, easingStyle, easingDirection)
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tween = tweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function fadeOutFrame(frame, duration, easingStyle, easingDirection)
    -- Include the main frame itself
    tweenObject(frame, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
    
    -- Apply fade-out to all child elements
    for _, child in ipairs(frame:GetDescendants()) do
        if child:IsA("GuiObject") then
            tweenObject(child, {BackgroundTransparency = 1}, duration, easingStyle, easingDirection)
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                tweenObject(child, {TextTransparency = 1}, duration, easingStyle, easingDirection)
            end
        end
    end
end

-- MAIN UI CREATION
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Parent = screenGui
mainFrame.Size = UIConfig.MainFrameSize
mainFrame.Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0) -- Start off-screen below
mainFrame.BackgroundColor3 = UIConfig.FrameColor
mainFrame.BackgroundTransparency = 1 -- Invisible initially
createUICorner(mainFrame)
createGradient(mainFrame, UIConfig.GradientColors)

local textLabel = Instance.new("TextLabel")
textLabel.Parent = mainFrame
textLabel.Size = UDim2.new(1, -20, 0.5, -10)
textLabel.Position = UDim2.new(0, 10, 0, 10)
textLabel.Text = "Loading..."
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextScaled = true
textLabel.Font = Enum.Font.GothamBold

local progressBar = Instance.new("Frame")
progressBar.Parent = mainFrame
progressBar.Size = UDim2.new(0, 0, 0.1, 0)
progressBar.Position = UDim2.new(0, 10, 0.8, 0)
progressBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
progressBar.BackgroundTransparency = 0
createUICorner(progressBar)

-- IN ANIMATION: Slide and Fade In
tweenObject(mainFrame, 
    {Position = UIConfig.MainFramePosition, BackgroundTransparency = 0}, 
    UIConfig.AnimationDuration, 
    UIConfig.TweenStyles.InStyle, 
    UIConfig.TweenStyles.InDirection
)

-- LOADING TEXT ANIMATION
spawn(function()
    local index = 1
    while true do
        textLabel.Text = UIConfig.LoadingText[index]
        index = (index % #UIConfig.LoadingText) + 1
        task.wait(1)
    end
end)

-- PROGRESS BAR EXPANSION
spawn(function()
    local tween = tweenObject(progressBar, {Size = UDim2.new(1, -20, 0.1, 0)}, UIConfig.ExpandFrameDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    tween.Completed:Wait()
    textLabel.Text = "Complete!"
    wait(1)
    -- OUT ANIMATION: Fade and Slide Out
    fadeOutFrame(mainFrame, UIConfig.FadeDuration, UIConfig.TweenStyles.OutStyle, UIConfig.TweenStyles.OutDirection)
    tweenObject(mainFrame, 
        {Position = UIConfig.MainFramePosition + UDim2.new(0, 0, 1, 0)}, 
        UIConfig.FadeDuration, 
        UIConfig.TweenStyles.OutStyle, 
        UIConfig.TweenStyles.OutDirection
    )
end)

-- TELEPORTATION LOGIC
local function teleportPlayer()
    task.wait(5) -- Wait for UI to complete animations
    
    -- Check if the _EVENT_CHALLENGES exists
    local eventChallenges = workspace:FindFirstChild("_EVENT_CHALLENGES")
    
    -- If _EVENT_CHALLENGES exists, check for specific event parts
    if eventChallenges then
        local lobbyTemplate = eventChallenges.Lobbies:FindFirstChild("_lobbytemplate_event3")
        if lobbyTemplate then
            local barrierPart = lobbyTemplate:FindFirstChild("Barrier")
            if barrierPart then
                -- If found, teleport to Barrier part
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = barrierPart.CFrame
                    print("Teleport successful to Barrier!")
                    return
                else
                    print("ERROR: HumanoidRootPart or Character not found!")
                    return
                end
            end
        end
    end

    -- If no event was found or Barrier wasn't found, fallback to spawn teleport
    print("Event or Barrier not found, teleporting to spawn point...")

    -- Fallback: Try to find spawn part in _BASES
    local spawnPoint = workspace._BASES and workspace._BASES.player and workspace._BASES.player.LANES and workspace._BASES.player.LANES["1"]:FindFirstChild("spawn")
    
    if spawnPoint then
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            -- If spawn found, teleport there
            player.Character.HumanoidRootPart.CFrame = spawnPoint.CFrame + Vector3.new(0, 5, 0) -- Adding a small height offset
            print("Teleport successful to spawn!")
        else
            print("ERROR: HumanoidRootPart or Character not found!")
        end
    else
        print("ERROR: Spawn point not found!")
    end
end

-- Loop teleport every 7 seconds
spawn(function()
    while true do
        teleportPlayer()
        wait(3.5)
    end
end)
