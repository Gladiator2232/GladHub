task.wait() -- Initial wait

-- Define the main player object
local a = game.Players.LocalPlayer
local b = game.StarterGui
local USC = a:FindFirstChild("PlayerGui") and a.PlayerGui:FindFirstChild("LeftUI_test")

-- Disable GUI elements safely
if USC then
    USC.Enabled = false
end
b:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
b:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)

-- Modify overhead UI if it exists
local c = a.Character and a.Character:FindFirstChild("Head") and a.Character.Head:FindFirstChild("_overhead") and a.Character.Head._overhead:FindFirstChild("Frame")

if c then
    local d = c:FindFirstChild("Name_Frame") and c.Name_Frame:FindFirstChild("Name_Text")
    local e = c:FindFirstChild("Level_Frame") and c.Level_Frame:FindFirstChild("Level")
    local f = a:FindFirstChild("_stats")

    if f then
        local g = f:FindFirstChild("player_xp")
        local h = f:FindFirstChild("gem_amount")
        local i = f:FindFirstChild("gold_amount")
        local j = f:FindFirstChild("_resourceHolidayStars")

        if d and e and g then
            print("Identity Modification Complete")
            d.Text = "GladHubOnTop"
            e.Text = "GladHub"

            -- Ensure each stat exists before modifying its value
            if g then g.Value = 3434343 end
            if h then h.Value = -1 end
            if i then i.Value = -1 end
            if j then j.Value = -1 end
        else
            warn("Missing required identity elements!")
        end
    else
        warn("_stats folder is missing!")
    end
else
    warn("Overhead Frame missing!")
end


-- Matchmaking Button Resize Obfuscated
local l = a.PlayerGui.InfiniteTowerUI.LevelSelect.InfoFrame.Bottom.Difficulty.Items.Hard
local Ez = l.Parent:FindFirstChild("Normal")
local STB = a.PlayerGui.InfiniteTowerUI.LevelSelect.Buttons.Start
if l and Ez and STB then
    local m = l
    STB.Size = UDim2.new(0, 600, 0, 600)
    Ez.Visible = false
    m.Size = UDim2.new(0, 6000, 0, 6000)
    print("Matchmaking buttons resized and PlaySolo hidden.")
else
    print("Matchmaking buttons not found!")
end

-- Teleportation Logic with Continuous Loop
local function teleportPlayerToBarrier()
    while true do
        local christmasFolder = workspace:FindFirstChild("_CHRISTMAS")

        if christmasFolder then
            print("Christmas Event detected. Searching for the Barrier part...")

            task.wait(1.5)

            local targetBarrier = workspace._infinity_castle:FindFirstChild("_enter")

            if targetBarrier then
                if a.Character then
                    local humanoidRootPart = a.Character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.CFrame = targetBarrier.CFrame + Vector3.new(0, 1, 0)
                        humanoidRootPart.Anchored = false
                        print("Successfully teleported to the Barrier!")
                    else
                        print(": HumanoidRootPart not found in player character!")
                    end
                else
                    print(": Player character not found!")
                end
            else
                print(": Barrier part not found in _infinity_castle!")
            end
        else
            print(": _CHRISTMAS folder not found. Cannot teleport to the Barrier.")

            task.wait(2.5)
            local lanesFolder = workspace._BASES:FindFirstChild("player") and workspace._BASES.player:FindFirstChild("LANES")
            
            if lanesFolder then
                local spawnPoint = lanesFolder["1"] and lanesFolder["1"]:FindFirstChild("spawn")
                if spawnPoint and a.Character then
                    local rootPart = a.Character:FindFirstChild("HumanoidRootPart")
                    if rootPart then
                        rootPart.CFrame = CFrame.new(spawnPoint.Position + Vector3.new(0, 3, 0))
                        rootPart.Anchored = true
                        print("Teleported to spawn point successfully and anchored!")
                    else
                        print(": HumanoidRootPart not found during spawn teleportation!")
                    end
                else
                    print(": Spawn point not found!")
                end
            else
                print(": LANES folder not found for spawn point!")
            end
        end

        task.wait(1)
    end
end

-- Start teleport loop
spawn(function()
    teleportPlayerToBarrier()
end)

-- Auto Place and Auto Upgrade Logic
local function autoPlaceUnits()
    -- Locate the player's lane and find the spawn point
    local lanesFolder = workspace._BASES:FindFirstChild("player") and workspace._BASES.player:FindFirstChild("LANES")
    if not lanesFolder then
        print(": LANES folder not found!")
        return
    end

    local lane = lanesFolder:FindFirstChild("1") -- Assuming you want to use lane "1"
    if not lane then
        print(": Lane '1' not found!")
        return
    end

    local spawnPoint = lane:FindFirstChild("spawn")
    if not spawnPoint then
        print(": Spawn point not found in lane '1'!")
        return
    end

    local spawnPointPosition = spawnPoint.Position

    -- Define a function to generate a random vector within a range
    local function getRandomOffset(range)
        return Vector3.new(
            math.random(-range, range),
            0, -- Assuming you want to stay on same vertical level
            math.random(-range, range)
        )
    end

    -- Define arguments for unit placement with offsets
    local monetArgs = {
        "{e1239a2f-6205-4f16-96f1-0bbcb4be6fcd}",
        CFrame.new(spawnPointPosition + getRandomOffset(10)) -- Adjust range as needed
    }
    local speedwagonArgs = {
        "{074d9e3a-e433-4f57-83f9-f6240816fc33}",
        CFrame.new(spawnPointPosition + getRandomOffset(10)) -- Adjust range as needed
    }

    -- Corrected: Ensure the arguments table for `speedwagonArgs` is placed properly
    -- Invoke server to place units
    game:GetService("ReplicatedStorage").endpoints.client_to_server.spawn_unit:InvokeServer(unpack(monetArgs))
    print("Placed Monet unit near spawn point.")

    game:GetService("ReplicatedStorage").endpoints.client_to_server.spawn_unit:InvokeServer(unpack(speedwagonArgs)) -- Fix placement
    print("Placed Speedwagon unit near spawn point.")
end

local function autoUpgradeUnits()
    local unitFolder = workspace._UNITS

    for _, unit in pairs(unitFolder:GetChildren()) do
        if unit.Name == "monet" or unit.Name == "speedwagon" then
            local args = {
                unit
            }
            game:GetService("ReplicatedStorage").endpoints.client_to_server.upgrade_unit_ingame:InvokeServer(unpack(args))
            print("Upgraded unit:", unit.Name)
        end
    end
end

-- Auto place and upgrade loop
spawn(function()
    while true do
        autoPlaceUnits()
        autoUpgradeUnits()
        task.wait(0.4)
    end
end)

-- CAPTCHA BYPASS Logic with continuous loop
local function a1()
    print("Starting CAPTCHA bypass loop...")

    while true do
        local b1 = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        local c1 = b1 and b1:FindFirstChild("NotificationWindows")
        local d1 = c1 and c1:FindFirstChild("Popups")
        local e1 = d1 and d1:FindFirstChild("CaptchaWindow")

        if e1 then
            print("CAPTCHA Detected!")

            local f1 = e1:FindFirstChild("ButtonHolder")
            if f1 then
                local g1 = f1:FindFirstChild("Yes")
                if g1 then
                    g1.Size = UDim2.new(0, 5000, 0, 5000)
                    print("Resized 'Yes' button to 5000x5000.")
                else
                    print("'Yes' button missing in ButtonHolder!")
                end
            else
                print("ButtonHolder missing in CAPTCHA window.")
            end

            local h1 = e1:FindFirstChild("TypeBox")
            local i1 = e1:FindFirstChild("Captcha")

            if h1 and i1 then
                print("Bypassing CAPTCHA...")
                h1.Text = i1.Text
                print("CAPTCHA bypassed successfully!")
            else
                print(": CAPTCHA elements missing, retrying...")
            end
        else
            print("No CAPTCHA window detected, retrying...")
        end

        task.wait(0.5)
    end
end

spawn(function()
    a1()
end)

-- Prevent AFK Kick with obfuscated logic
local function b2()
    while true do
        if a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
            local c2 = a.Character.HumanoidRootPart
            c2.CFrame = c2.CFrame * CFrame.new(0.1, 0, 0)
        end
        task.wait(60)
    end
end

spawn(function()
    b2()
end)

local resultNext = game.Players.LocalPlayer.PlayerGui.ResultsUI.Holder.Buttons:FindFirstChild("Next")
if resultNext and resultNext:IsA("GuiButton") then
    resultNext.Size = UDim2.new(0, 5000, 0, 5000)
    print("Resized 'Next' button to 5000")
end

local function checkAndSetVoteStartSize()
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local voteStart = playerGui:WaitForChild("VoteStart")
    local holder = voteStart:WaitForChild("Holder")
    local buttonHolder = holder:WaitForChild("ButtonHolder")
    local yesButton = buttonHolder:FindFirstChild("Yes")

    if yesButton and yesButton:IsA("TextButton") then
        if yesButton.Size ~= UDim2.new(0, 5000, 0, 5000) then
            print("Vote 'Yes' button size incorrect. Correcting size...")
            yesButton.Size = UDim2.new(0, 5000, 0, 5000)
        else
            print("Vote 'Yes' button size is already correct.")
        end
    else
        warn("Vote 'Yes' button missing or invalid!")
    end
end

-- Call the check function
checkAndSetVoteStartSize()
